// <auto-generated />
using System;
using BrightLifeIMS.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrightLifeIMS.Web.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901080250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoSaveData")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomBool1Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomBool1Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomBool1Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomBool1Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool1Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool1State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomBool2Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomBool2Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomBool2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomBool2Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool2Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool2State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomBool3Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomBool3Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomBool3Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomBool3Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool3Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomBool3State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomIdFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomInt1Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomInt1Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomInt1Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomInt1Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt1Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt1State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomInt2Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomInt2Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomInt2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomInt2Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt2Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt2State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomInt3Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomInt3Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomInt3Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomInt3Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt3Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomInt3State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString1Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomString1Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString1Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomString1Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString1Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString1State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString2Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomString2Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomString2Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString2Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString2State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString3Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomString3Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString3Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomString3Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString3Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomString3State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText1Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomText1Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText1Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomText1Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText1Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText1State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText2Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomText2Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomText2Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText2Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText2State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText3Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomText3Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomText3Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomText3Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText3Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomText3State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl1Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomUrl1Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl1Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomUrl1Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl1Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl1State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl2Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomUrl2Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomUrl2Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl2Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl2State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl3Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CustomUrl3Displayed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomUrl3Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomUrl3Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl3Required")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomUrl3State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionBn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSavedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("LikesCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleBn")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CloudImages")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("CustomBool1")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CustomBool2")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CustomBool3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomFieldsJson")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomFields");

                    b.Property<string>("CustomId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomInt1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomInt2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomInt3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomString1")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomString2")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomString3")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText1")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomText3")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomUrl1")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomUrl2")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomUrl3")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikesCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("en-US");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.Inventory", b =>
                {
                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany("CreatedInventories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.Item", b =>
                {
                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany("CreatedItems")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrightLifeIMS.Web.Models.Entities.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BrightLifeIMS.Web.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BrightLifeIMS.Web.Models.Entities.User", b =>
                {
                    b.Navigation("CreatedInventories");

                    b.Navigation("CreatedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
